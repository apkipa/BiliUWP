namespace BiliUWP {
    struct HttpRandomAccessStreamMetrics {
        UInt64 ActiveConnectionsCount;
        UInt64 SentRequestsDelta;
        UInt64 InboundBitsPerSecond;
        UInt64 DownloadedBytesDelta;
        UInt64 AllocatedBufferSize;
        UInt64 UsedBufferSize;
    };

    // Bitmask
    enum HttpRandomAccessStreamRetryCondition {
        None = 0,
        RetryOnTimeout = 0x1,       // [WIP]
        RetryOnFetchFailure = 0x2,
    };
    enum HttpRandomAccessStreamOnRetrySuccessOperation {
        None = 0,
        ClearFailureCounter = 1,
    };
    // Bitmask
    enum HttpRandomAccessStreamTimeoutCondition {
        None = 0,
        TimeoutOnInactivity = 0x1,  // Timeout if there was no network activity for a long time
        TimeoutOnExpiry = 0x2,      // Timeout if the whole operation took too long
    };
    struct HttpRandomAccessStreamTimeoutPolicy {
        HttpRandomAccessStreamTimeoutCondition Conditions;
        Windows.Foundation.TimeSpan TimeoutValue;
    };
    struct HttpRandomAccessStreamRetryPolicy {
        HttpRandomAccessStreamRetryCondition Conditions;
        HttpRandomAccessStreamOnRetrySuccessOperation OnRetrySuccessOperation;
        UInt32 MaxRetryCount;
        Windows.Foundation.TimeSpan RetryDelay;
        HttpRandomAccessStreamTimeoutPolicy TimeoutPolicy;
    };

    enum HttpRandomAccessStreamBufferOptions {
        None,               // Disable cache
        Sized,              // [WIP] Limited cache capacity, populated on demand
        DynamicallySized,   // [WIP] Dynamic cache capacity, populated & expands / shrinks on demand
        Full,               // Full cache capacity, populated on demand
        ImmediateFull,      // Full cache capacity, populated immediately
    };

    runtimeclass NewUriRequestedEventArgs {
        Windows.Foundation.Deferral GetDeferral();
    }

    // NOTE: cache_capacity: Unsupported.
    // NOTE: extra_integrity_check: Unsupported. If set to true, hresult_invalid_argument will be thrown.
    //       HttpRandomAccessStream can retrieve data from multiple uris. If the candidates list becomes
    //       empty while reading, NewUriRequested event will be fired only once during the read session.
    [default_interface]
    runtimeclass HttpRandomAccessStream : Windows.Storage.Streams.IRandomAccessStreamWithContentType {
        static Windows.Foundation.IAsyncOperation<HttpRandomAccessStream> CreateAsync(
            Windows.Foundation.Uri http_uri,
            Windows.Web.Http.HttpClient http_client,
            HttpRandomAccessStreamBufferOptions buffer_options,
            UInt64 cache_capacity,
            Boolean extra_integrity_check
        );

        // NOTE: New uris will be added to list
        void SupplyNewUri(Windows.Foundation.Uri[] new_uris);
        Windows.Foundation.Uri[] GetActiveUris();
        // NOTE: max_events_count is an internal value; If 0 is passed, an optimal value will be chosen
        void EnableMetricsCollection(Boolean enable, UInt64 max_events_count);
        // NOTE: If clear_events is true, events will be cleared after getting metrics
        // WARN: If metrics collection is not enabled, an exception will be thrown
        HttpRandomAccessStreamMetrics GetMetrics(Boolean clear_events);

        HttpRandomAccessStreamRetryPolicy RetryPolicy;  // [WIP]

        // WARN: The sender param is a special HttpRandomAccessStream that can only be used
        //       to supply uris; holding sender forever will cause resource leak
        event Windows.Foundation.TypedEventHandler<HttpRandomAccessStream, NewUriRequestedEventArgs> NewUriRequested;
    }
}
